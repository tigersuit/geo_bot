import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
import os

API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞
FIXED_WIDTH = 2  # –º–µ—Ç—Ä–∞

# –¶–µ–Ω—ã –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (—Ä—É–±–ª–µ–π –∑–∞ –º¬≤)
PRICE_BY_DENSITY = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"), KeyboardButton(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")],
        [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"), KeyboardButton(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton(text="‚ùì –ö–≤–∏–∑"), KeyboardButton(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")]
    ],
    resize_keyboard=True
)

density_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="100"), KeyboardButton(text="150")],
        [KeyboardButton(text="200"), KeyboardButton(text="250")],
        [KeyboardButton(text="300"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_calculations = {}

# –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
tips_text = (
    "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª–µ–º:\n"
    "- –í—Å–µ–≥–¥–∞ –±–µ—Ä–∏—Ç–µ –∑–∞–ø–∞—Å –º–∏–Ω–∏–º—É–º 20%.\n"
    "- –£–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å —Å –Ω–∞—Ö–ª–µ—Å—Ç–æ–º 15-20 —Å–º.\n"
    "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.\n"
    "- –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!\n"
)

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
materials_text = (
    "üì¶ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n"
    "‚Ä¢ –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ª–æ–µ–≤ –≥—Ä—É–Ω—Ç–∞ –∏ —É–ª—É—á—à–∞–µ—Ç –¥—Ä–µ–Ω–∞–∂.\n"
    "‚Ä¢ –°–ø–∞–Ω–±–æ–Ω–¥ ‚Äî –ª—ë–≥–∫–∏–π –Ω–µ—Ç–∫–∞–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–∫—Ä—ã—Ç–∏–π –∏ –∑–∞—â–∏—Ç—ã.\n"
    "‚Ä¢ –ì–µ–æ—Å–µ—Ç–∫–∞ ‚Äî –∞—Ä–º–∏—Ä—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–æ–≤.\n"
    "‚Ä¢ –ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞ ‚Äî –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–æ–Ω–æ–≤ –∏ –¥–æ—Ä–æ–∂–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π.\n"
)

# –ö–≤–∏–∑ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
quiz_questions = [
    ("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:", [
        ("–ü–∞—Ä–∫–æ–≤–∫–∞", 300),
        ("–û—Ç–º–æ—Å—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ –¥–æ–º–∞", 200),
        ("–î—Ä–µ–Ω–∞–∂", 150),
        ("–°–∞–¥–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏", 100),
        ("–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–æ–≤", 250)
    ])
]

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb
    )

@dp.message(F.text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def start_calculation(message: types.Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_length)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (—à–∏—Ä–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ 2 –º–µ—Ç—Ä–∞):",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

@dp.message(CalcStates.waiting_for_length)
async def process_length(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb)
        return

    try:
        length = float(message.text.replace(",", "."))
        if length <= 0:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏–Ω—ã.")
        return

    await state.update_data(length=length)
    await state.set_state(CalcStates.waiting_for_density)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–≥/–º¬≤):", reply_markup=density_kb)

@dp.message(CalcStates.waiting_for_density)
async def process_density(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb)
        return

    try:
        density = int(message.text)
        if density not in PRICE_BY_DENSITY:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    data = await state.get_data()
    length = data.get("length")
    width = FIXED_WIDTH
    area = length * width
    # –ó–∞–ø–∞—Å 20% –ø—Ä–∏ –ø–ª–æ—â–∞–¥–∏ < 100
    if area < 100:
        area *= 1.2

    price_per_m2 = PRICE_BY_DENSITY[density]
    total_price = round(area * price_per_m2, 2)

    result_text = (
        f"–†–∞—Å—á—ë—Ç –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:\n"
        f"–î–ª–∏–Ω–∞: {length} –º\n"
        f"–®–∏—Ä–∏–Ω–∞: {width} –º (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)\n"
        f"–ü–ª–æ—â–∞–¥—å: {area:.2f} –º¬≤ (—Å –∑–∞–ø–∞—Å–æ–º)\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
        f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} ‚ÇΩ\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –±–æ—Ç–∞! –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∑–¥–µ—Å—å."
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
    user_id = message.from_user.id
    if user_id not in user_calculations:
        user_calculations[user_id] = []
    user_calculations[user_id].append({
        "length": length,
        "width": width,
        "area": round(area, 2),
        "density": density,
        "price_per_m2": price_per_m2,
        "total_price": total_price
    })

    await message.answer(result_text, reply_markup=main_menu_kb)
    await state.clear()

@dp.message(F.text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
async def show_calculations(message: types.Message):
    user_id = message.from_user.id
    calcs = user_calculations.get(user_id)
    if not calcs:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_menu_kb)
        return

    response = "üíæ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã:\n\n"
    for i, calc in enumerate(calcs, 1):
        response += (
            f"{i}. –î–ª–∏–Ω–∞: {calc['length']} –º, "
            f"–ü–ª–æ—â–∞–¥—å: {calc['area']} –º¬≤, "
            f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {calc['density']} –≥/–º¬≤, "
            f"–¶–µ–Ω–∞: {calc['total_price']} ‚ÇΩ\n"
        )
    await message.answer(response, reply_markup=main_menu_kb)

@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
async def send_tips(message: types.Message):
    await message.answer(tips_text, reply_markup=main_menu_kb)

@dp.message(F.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def send_materials(message: types.Message):
    await message.answer(materials_text, reply_markup=main_menu_kb)

# –ö–≤–∏–∑
class QuizStates(StatesGroup):
    waiting_for_answer = State()

@dp.message(F.text == "‚ùì –ö–≤–∏–∑")
async def start_quiz(message: types.Message, state: FSMContext):
    question, answers = quiz_questions[0]
    keyboard = InlineKeyboardMarkup(row_width=1)
    for answer_text, density in answers:
        keyboard.add(InlineKeyboardButton(text=answer_text, callback_data=f"quiz_{density}"))
    await state.set_state(QuizStates.waiting_for_answer)
    await message.answer(question, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith("quiz_"))
async def process_quiz_answer(callback: types.CallbackQuery, state: FSMContext):
    density = int(callback.data.split("_")[1])
    await callback.message.answer(
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {density} –≥/–º¬≤"
    )
    await state.clear()
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    await callback.answer()

@dp.message(F.text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
async def new_calc(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç.", reply_markup=main_menu_kb)

@dp.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu_kb)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
