from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.client.session import DefaultBotProperties
from aiogram.enums import ParseMode
import asyncio

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

WIDTH = 2
PRICE_BY_DENSITY = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70,
}

class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()
    quiz = State()

def main_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"), KeyboardButton("üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")],
            [KeyboardButton("üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"), KeyboardButton("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton("üìù –ö–≤–∏–∑"), KeyboardButton("üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")],
        ],
        resize_keyboard=True
    )
    return kb

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(Text(equals=["üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç", "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"]))
async def start_calc(message: types.Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_length)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ (–≤ –º–µ—Ç—Ä–∞—Ö). –®–∏—Ä–∏–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî 2 –º–µ—Ç—Ä–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(StateFilter(CalcStates.waiting_for_length))
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        if length <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏–Ω—ã.")
        return
    await state.update_data(length=length)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for density in PRICE_BY_DENSITY.keys():
        kb.add(KeyboardButton(str(density)))
    await state.set_state(CalcStates.waiting_for_density)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–≥/–º¬≤):", reply_markup=kb)

@dp.message(StateFilter(CalcStates.waiting_for_density))
async def process_density(message: types.Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in PRICE_BY_DENSITY:
            raise ValueError
    except ValueError:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return
    data = await state.get_data()
    length = data.get("length")
    if length is None:
        await message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ /start")
        return
    area = WIDTH * length
    if area < 100:
        area *= 1.2  # +20% –∑–∞–ø–∞—Å
    price_per_m2 = PRICE_BY_DENSITY[density]
    total_cost = area * price_per_m2
    calc_result = {
        "length": length,
        "width": WIDTH,
        "density": density,
        "area": round(area, 2),
        "price_per_m2": price_per_m2,
        "total_cost": round(total_cost, 2),
    }
    await state.update_data(last_calc=calc_result)
    await message.answer(
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞:</b>\n"
        f"–î–ª–∏–Ω–∞: {length} –º\n"
        f"–®–∏—Ä–∏–Ω–∞: {WIDTH} –º\n"
        f"–ü–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º: {calc_result['area']} –º¬≤\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
        f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calc_result['total_cost']} ‚ÇΩ",
        reply_markup=main_menu()
    )
    await state.clear()

@dp.message(Text(equals="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"))
async def show_calcs(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_calc = data.get("last_calc")
    if not last_calc:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_menu())
        return
    await message.answer(
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á—ë—Ç:</b>\n"
        f"–î–ª–∏–Ω–∞: {last_calc['length']} –º\n"
        f"–®–∏—Ä–∏–Ω–∞: {last_calc['width']} –º\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {last_calc['density']} –≥/–º¬≤\n"
        f"–ü–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º: {last_calc['area']} –º¬≤\n"
        f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {last_calc['price_per_m2']} ‚ÇΩ\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {last_calc['total_cost']} ‚ÇΩ",
        reply_markup=main_menu()
    )

@dp.message(Text(equals="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"))
async def tips_and_hacks(message: types.Message):
    tips = (
        "üí° –°–æ–≤–µ—Ç—ã –ø–æ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—é:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ 20% –∑–∞–ø–∞—Å–∞ –ø–ª–æ—â–∞–¥–∏.\n"
        "‚Ä¢ –î–ª—è —Å–∞–¥–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫ ‚Äî –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 150 –≥/–º¬≤.\n"
        "‚Ä¢ –î–ª—è –ø–∞—Ä–∫–æ–≤–æ–∫ ‚Äî 250-300 –≥/–º¬≤.\n"
        "‚Ä¢ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É!\n"
        "‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å—É—Ö–æ–º –º–µ—Å—Ç–µ."
    )
    await message.answer(tips, reply_markup=main_menu())

@dp.message(Text(equals="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
async def materials_info(message: types.Message):
    text = (
        "<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
        "‚Ä¢ <b>–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å</b> ‚Äî —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ—á–≤—ã.\n"
        "‚Ä¢ <b>–ì–µ–æ—Å–µ—Ç–∫–∞</b> ‚Äî –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–Ω—Ç–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏–π.\n"
        "‚Ä¢ <b>–ë–∏–æ–º–∞—Ç—ã</b> ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç —ç—Ä–æ–∑–∏–∏ –ø–æ—á–≤—ã.\n"
        "‚Ä¢ <b>–°–ø–∞–Ω–±–æ–Ω–¥</b> ‚Äî —É–∫—Ä—ã–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
        "‚Ä¢ <b>–ì–µ–æ—Ä–µ—à–µ—Ç–∫–∞</b> ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—á–Ω—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–æ—Ä–æ–≥ –∏ –ø–∞—Ä–∫–æ–≤–æ–∫."
    )
    await message.answer(text, reply_markup=main_menu())

quiz_questions = [
    {
        "question": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?",
        "options": [
            "–ü–∞—Ä–∫–æ–≤–∫–∞",
            "–û—Ç–º–æ—Å—Ç–∫–∞",
            "–î—Ä–µ–Ω–∞–∂",
            "–°–∞–¥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞",
            "–û–≥–æ—Ä–æ–¥"
        ],
        "recommendations": {
            "–ü–∞—Ä–∫–æ–≤–∫–∞": 300,
            "–û—Ç–º–æ—Å—Ç–∫–∞": 200,
            "–î—Ä–µ–Ω–∞–∂": 150,
            "–°–∞–¥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞": 150,
            "–û–≥–æ—Ä–æ–¥": 100,
        }
    }
]

@dp.message(Text(equals="üìù –ö–≤–∏–∑"))
async def start_quiz(message: types.Message, state: FSMContext):
    await state.set_state(CalcStates.quiz)
    question = quiz_questions[0]["question"]
    options = quiz_questions[0]["options"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for option in options:
        kb.add(KeyboardButton(option))
    await message.answer(question, reply_markup=kb)

@dp.message(StateFilter(CalcStates.quiz))
async def quiz_answer(message: types.Message, state: FSMContext):
    answer = message.text
    recs = quiz_questions[0]["recommendations"]
    if answer not in recs:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∞–º–∏.")
        return
    recommended_density = recs[answer]
    await message.answer(
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–ª—è '{answer}': {recommended_density} –≥/–º¬≤.",
        reply_markup=main_menu()
    )
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
