import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.client.bot import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

logging.basicConfig(level=logging.INFO)

# –¶–µ–Ω—ã –∑–∞ –º2 –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
PRICES = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70,
}

WIDTH = 2  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()
    waiting_for_quiz_answer = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"),
        KeyboardButton("üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"),
    )
    kb.add(
        KeyboardButton("üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"),
        KeyboardButton("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
    )
    kb.add(
        KeyboardButton("üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"),
        KeyboardButton("üìù –ö–≤–∏–∑"),
    )
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
def density_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for density in PRICES.keys():
        kb.add(KeyboardButton(str(density)))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–≤–∏–∑–∞
QUIZ_OPTIONS = {
    "–ü–∞—Ä–∫–æ–≤–∫–∞": 300,
    "–î–æ—Ä–æ–∂–∫–∞": 150,
    "–û—Ç–º–æ—Å—Ç–∫–∞": 200,
    "–î—Ä–µ–Ω–∞–∂": 250,
    "–ì–∞–∑–æ–Ω": 100,
}

def quiz_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for option in QUIZ_OPTIONS.keys():
        kb.add(KeyboardButton(option))
    return kb

# –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
ADVICES_TEXT = (
    "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª–µ–º:\n"
    "- –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∞—Å 20% –ø—Ä–∏ –ø–ª–æ—â–∞–¥–∏ –º–µ–Ω—å—à–µ 100 –º¬≤.\n"
    "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n"
    "- –ü—Ä–∏ —É–∫–ª–∞–¥–∫–µ —Ä–æ–≤–Ω—è–π—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ —É–±–∏—Ä–∞–π—Ç–µ –º—É—Å–æ—Ä.\n"
    "- –ó–∞–∫—Ä–µ–ø–ª—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–º–µ—â–∞–ª—Å—è."
)

# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
MATERIALS_TEXT = (
    "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
    "‚Ä¢ –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å ‚Äì –ø—Ä–æ—á–Ω—ã–π –Ω–µ—Ç–∫–∞–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ—ë–≤.\n"
    "‚Ä¢ –ì–µ–æ—Å–µ—Ç–∫–∞ ‚Äì –∞—Ä–º–∏—Ä—É—é—â–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–æ–≤.\n"
    "‚Ä¢ –ë–∏–æ–º–∞—Ç—ã ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –≤–æ–ª–æ–∫–Ω–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–æ—á–≤—ã –æ—Ç —ç—Ä–æ–∑–∏–∏.\n"
    "‚Ä¢ –°–ø–∞–Ω–±–æ–Ω–¥ ‚Äì –ª–µ–≥–∫–∏–π —É–∫—Ä—ã–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
    "‚Ä¢ –ì–µ–æ—Ä–µ—à–µ—Ç–∫–∞ ‚Äì –æ–±—ä–µ–º–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–Ω—Ç–æ–≤."
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"), session=AiohttpSession())
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø—Ä–æ—Å—Ç–µ–π—à–µ–µ –≤ –ø–∞–º—è—Ç–∏)
user_calculations = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb()
    )

@dp.message(Text("üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))
async def start_calc(message: types.Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_length)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (—à–∏—Ä–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ 2 –º–µ—Ç—Ä–∞):",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(StateFilter(CalcStates.waiting_for_length))
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        if length <= 0:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.")
        return
    await state.update_data(length=length)
    await state.set_state(CalcStates.waiting_for_density)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:", reply_markup=density_kb())

@dp.message(StateFilter(CalcStates.waiting_for_density))
async def process_density(message: types.Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in PRICES:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")
        return
    data = await state.get_data()
    length = data.get("length")

    area = WIDTH * length
    if area < 100:
        area_with_buffer = area * 1.2
    else:
        area_with_buffer = area

    price_per_m2 = PRICES[density]
    total_cost = round(area_with_buffer * price_per_m2, 2)
    area_with_buffer = round(area_with_buffer, 2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    user_id = message.from_user.id
    user_calculations.setdefault(user_id, [])
    user_calculations[user_id].append({
        "length": length,
        "width": WIDTH,
        "density": density,
        "area": area_with_buffer,
        "price_per_m2": price_per_m2,
        "total_cost": total_cost
    })

    await message.answer(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞:\n"
        f"–î–ª–∏–Ω–∞: {length} –º\n"
        f"–®–∏—Ä–∏–Ω–∞: {WIDTH} –º (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)\n"
        f"–ü–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º: {area_with_buffer} –º¬≤\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
        f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚ÇΩ",
        reply_markup=main_menu_kb()
    )
    await state.clear()

@dp.message(Text("üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"))
async def show_calculations(message: types.Message):
    user_id = message.from_user.id
    calcs = user_calculations.get(user_id)
    if not calcs:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_menu_kb())
        return
    text = "–í–∞—à–∏ —Ä–∞—Å—á—ë—Ç—ã:\n\n"
    for i, calc in enumerate(calcs, 1):
        text += (
            f"{i}. –î–ª–∏–Ω–∞: {calc['length']} –º, "
            f"–®–∏—Ä–∏–Ω–∞: {calc['width']} –º, "
            f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {calc['density']} –≥/–º¬≤, "
            f"–ü–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º: {calc['area']} –º¬≤, "
            f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {calc['price_per_m2']} ‚ÇΩ, "
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calc['total_cost']} ‚ÇΩ\n"
        )
    await message.answer(text, reply_markup=main_menu_kb())

@dp.message(Text("üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"))
async def show_advices(message: types.Message):
    await message.answer(ADVICES_TEXT, reply_markup=main_menu_kb())

@dp.message(Text("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
async def show_materials(message: types.Message):
    await message.answer(MATERIALS_TEXT, reply_markup=main_menu_kb())

@dp.message(Text("üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"))
async def new_calc(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CalcStates.waiting_for_length)

# –ö–≤–∏–∑

@dp.message(Text("üìù –ö–≤–∏–∑"))
async def start_quiz(message: types.Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_quiz_answer)
    await message.answer("–î–ª—è —á–µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=quiz_kb())

@dp.message(StateFilter(CalcStates.waiting_for_quiz_answer))
async def process_quiz_answer(message: types.Message, state: FSMContext):
    choice = message.text
    density = QUIZ_OPTIONS.get(choice)
    if density is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await message.answer(
        f"–î–ª—è {choice.lower()} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤.",
        reply_markup=main_menu_kb()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=main_menu_kb())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
