import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram import F

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CalcState(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()

# –¶–µ–Ω—ã –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
DENSITY_PRICES = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
    builder.button(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
    builder.button(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
    builder.button(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üìù –ö–≤–∏–∑")
    builder.button(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å (–¥–æ—Ä–Ω–∏—Ç).", reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"
@dp.message(F.text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def start_calc(message: Message, state: FSMContext):
    await state.set_state(CalcState.waiting_for_length)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")

@dp.message(CalcState.waiting_for_length)
async def process_length(message: Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        await state.update_data(length=length)
        # –ü–ª–æ—Ç–Ω–æ—Å—Ç–∏
        builder = ReplyKeyboardBuilder()
        for d in DENSITY_PRICES.keys():
            builder.button(text=str(d))
        builder.adjust(3)
        await state.set_state(CalcState.waiting_for_density)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–≥/–º¬≤):", reply_markup=builder.as_markup(resize_keyboard=True))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.")

@dp.message(CalcState.waiting_for_density)
async def process_density(message: Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in DENSITY_PRICES:
            raise ValueError
        data = await state.get_data()
        length = data['length']
        width = 2  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
        area = length * width

        if area < 100:
            area *= 1.2
            reserve_text = "\n–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø–∞—Å 20% –∏–∑-–∑–∞ –ø–ª–æ—â–∞–¥–∏ < 100 –º¬≤."
        else:
            reserve_text = ""

        price_per_m2 = DENSITY_PRICES[density]
        total_price = round(area * price_per_m2, 2)

        await message.answer(
            f"üìê –ü–ª–æ—â–∞–¥—å: {area:.2f} –º¬≤\n"
            f"üì¶ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
            f"üßæ –ò—Ç–æ–≥: {total_price} ‚ÇΩ"
            f"{reserve_text}",
            reply_markup=main_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
@dp.message(F.text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
async def my_calcs(message: Message):
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!")

# –ö–Ω–æ–ø–∫–∞ ¬´–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç¬ª
@dp.message(F.text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
async def new_calc(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(CalcState.waiting_for_length)

# –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
async def tips(message: Message):
    await message.answer("üí° –õ–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—é:\n\n"
                         "‚ñ™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 200+ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏\n"
                         "‚ñ™ –£–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ —É—Ç—Ä–∞–º–±–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"
                         "‚ñ™ –î–µ–ª–∞–π—Ç–µ –Ω–∞—Ö–ª—ë—Å—Ç 10‚Äì20 —Å–º")

# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
@dp.message(F.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: Message):
    await message.answer(
        "<b>üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
        "‚ñ™ <b>–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å (–¥–æ—Ä–Ω–∏—Ç):</b> –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n"
        "‚ñ™ <b>–ì–µ–æ—Å–µ—Ç–∫–∞:</b> —É—Å–∏–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π\n"
        "‚ñ™ <b>–ë–∏–æ–º–∞—Ç—ã:</b> –∑–∞—â–∏—Ç–∞ —Å–∫–ª–æ–Ω–æ–≤ –æ—Ç —ç—Ä–æ–∑–∏–∏\n"
        "‚ñ™ <b>–°–ø–∞–Ω–±–æ–Ω–¥:</b> –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤, –Ω–µ –≥–Ω–∏—ë—Ç\n"
        "‚ñ™ <b>–ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞:</b> –æ–±—ä—ë–º–Ω–æ–µ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )

# –ö–≤–∏–∑
@dp.message(F.text == "üìù –ö–≤–∏–∑")
async def quiz(message: Message):
    builder = ReplyKeyboardBuilder()
    builder.button(text="üöó –ü–∞—Ä–∫–æ–≤–∫–∞")
    builder.button(text="üè† –û—Ç–º–æ—Å—Ç–∫–∞")
    builder.button(text="üíß –î—Ä–µ–Ω–∞–∂")
    builder.button(text="üë£ –î–æ—Ä–æ–∂–∫–∞")
    builder.adjust(2)
    await message.answer("–î–ª—è —á–µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(F.text.in_({"üöó –ü–∞—Ä–∫–æ–≤–∫–∞", "üè† –û—Ç–º–æ—Å—Ç–∫–∞", "üíß –î—Ä–µ–Ω–∞–∂", "üë£ –î–æ—Ä–æ–∂–∫–∞"}))
async def quiz_answer(message: Message):
    mapping = {
        "üöó –ü–∞—Ä–∫–æ–≤–∫–∞": 250,
        "üè† –û—Ç–º–æ—Å—Ç–∫–∞": 150,
        "üíß –î—Ä–µ–Ω–∞–∂": 100,
        "üë£ –î–æ—Ä–æ–∂–∫–∞": 150
    }
    recommended = mapping.get(message.text)
    await message.answer(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: <b>{recommended} –≥/–º¬≤</b>", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_other(message: Message, state: FSMContext):
    current = await state.get_state()
    if current in [CalcState.waiting_for_length, CalcState.waiting_for_density]:
        return  # –ù–µ –º–µ—à–∞–µ–º, –±–æ—Ç –∂–¥—ë—Ç —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–æ—Ä
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
