import logging
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CalcState(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()

# –¶–µ–Ω—ã –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
DENSITY_PRICES = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
    builder.button(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
    builder.button(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
    builder.button(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üìù –ö–≤–∏–∑")
    builder.button(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–¥–æ—Ä–Ω–∏—Ç–∞) –ø–æ–¥ —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏.\n\n"
        f"üîπ –£–∑–Ω–∞–π, –∫–∞–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–æ–π–¥—ë—Ç –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏, –æ—Ç–º–æ—Å—Ç–∫–∏ –∏–ª–∏ –¥–æ—Ä–æ–∂–∫–∏.\n"
        f"üîπ –ë—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø–ª–æ—â–∞–¥—å.\n"
        f"üîπ –ü–æ–ª—É—á–∏ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=main_menu()
    )
@dp.message(F.text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def start_calc(message: Message, state: FSMContext):
    await state.set_state(CalcState.waiting_for_length)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìù –ö–≤–∏–∑¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.",
        reply_markup=main_menu()
    )

@dp.message(CalcState.waiting_for_length)
async def process_length(message: Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        await state.update_data(length=length)

        # –ü–ª–æ—Ç–Ω–æ—Å—Ç–∏
        builder = ReplyKeyboardBuilder()
        for d in DENSITY_PRICES.keys():
            builder.button(text=str(d))
        builder.adjust(3)
        await state.set_state(CalcState.waiting_for_density)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–≥/–º¬≤):\n"
            "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–≤–∏–∑–æ–º ¬´üìù –ö–≤–∏–∑¬ª –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.")

@dp.message(CalcState.waiting_for_density)
async def process_density(message: Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in DENSITY_PRICES:
            raise ValueError
        data = await state.get_data()
        length = data['length']
        width = 2  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        area = length * width

        if area < 100:
            area *= 1.2
            reserve_text = "\n–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø–∞—Å 20% –∏–∑-–∑–∞ –ø–ª–æ—â–∞–¥–∏ < 100 –º¬≤."
        else:
            reserve_text = ""

        price_per_m2 = DENSITY_PRICES[density]
        total_price = round(area * price_per_m2, 2)

        await message.answer(
            f"üìê –ü–ª–æ—â–∞–¥—å: {area:.2f} –º¬≤\n"
            f"üì¶ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
            f"üßæ –ò—Ç–æ–≥: {total_price} ‚ÇΩ"
            f"{reserve_text}",
            reply_markup=main_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")

@dp.message(F.text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
async def my_calcs(message: Message):
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!")

@dp.message(F.text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
async def new_calc(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(CalcState.waiting_for_length)

@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
async def tips(message: Message):
    await message.answer(
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:</b>\n\n"
        "üî∏ <b>1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:</b>\n"
        "‚ñ™ 100‚Äì150 –≥/–º¬≤ ‚Äî –¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞ –∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞\n"
        "‚ñ™ 150‚Äì200 –≥/–º¬≤ ‚Äî –¥–ª—è —Å–∞–¥–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫, –æ—Ç–º–æ—Å—Ç–∫–∏\n"
        "‚ñ™ 200‚Äì300 –≥/–º¬≤ ‚Äî –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏, –ø—Ä–æ–µ–∑–¥–æ–≤, –¥–æ—Ä–æ–≥\n\n"
        "üî∏ <b>2. –£–∫–ª–∞–¥–∫–∞:</b>\n"
        "‚ñ™ –£—Ç—Ä–∞–º–±—É–π –æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ø–µ—Å–æ–∫/–≥—Ä—É–Ω—Ç), —É–±–µ—Ä–∏ –∫—Ä—É–ø–Ω—ã–µ –∫–∞–º–Ω–∏\n"
        "‚ñ™ –î–µ–ª–∞–π –Ω–∞—Ö–ª—ë—Å—Ç 10‚Äì20 —Å–º –º–µ–∂–¥—É –ø–æ–ª–æ—Ç–Ω–∞–º–∏\n"
        "‚ñ™ –†–∞—Å–ø–æ–ª–æ–∂–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –≤–Ω–∞—Ö–ª—ë—Å—Ç ‚Äî –ø–æ–ø–µ—Ä—ë–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
        "üî∏ <b>3. –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å + —â–µ–±–µ–Ω—å:</b>\n"
        "‚ñ™ –í—Å–µ–≥–¥–∞ –∫–ª–∞–¥–∏ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å –ø–æ–¥ —â–µ–±–µ–Ω—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ—Å–µ–¥–∞–Ω–∏—è\n"
        "‚ñ™ –ü—Ä–∏ –¥—Ä–µ–Ω–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –æ–±–æ—Ä–∞—á–∏–≤–∞–π —â–µ–±–µ–Ω—å –ø–æ–ª–Ω–æ—Å—Ç—å—é\n\n"
        "üî∏ <b>4. –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ—Ä–Ω—è–∫–æ–≤:</b>\n"
        "‚ñ™ –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∞–Ω–±–æ–Ω–¥ –∏–ª–∏ –¥–æ—Ä–Ω–∏—Ç 150 –≥/–º¬≤ –ø–æ–¥ —â–µ–±–µ–Ω—å –∏–ª–∏ –ø–ª–∏—Ç–∫—É\n"
        "‚ñ™ –ù–µ —ç–∫–æ–Ω–æ–º—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ: —Ç–æ–Ω–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –º–æ–∂–µ—Ç –ø–æ—Ä–≤–∞—Ç—å—Å—è\n\n"
        "üî∏ <b>5. –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:</b>\n"
        "‚ùå –£–∫–ª–∞–¥–∫–∞ –Ω–∞ –≥—Ä—è–∑–Ω—É—é –∏–ª–∏ –Ω–µ—Ä–æ–≤–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å\n"
        "‚ùå –ú–∞–ª–µ–Ω—å–∫–∏–π –Ω–∞—Ö–ª—ë—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏\n"
        "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–æ–Ω–∫–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π\n\n"
        "üî∏ <b>6. –†–µ–∑–∫–∞ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è:</b>\n"
        "‚ñ™ –†–µ–∂—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ–∂–æ–º –∏–ª–∏ –Ω–æ–∂–Ω–∏—Ü–∞–º–∏\n"
        "‚ñ™ –ö—Ä–µ–ø–∏ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å –∞–Ω–∫–µ—Ä–∞–º–∏ –∏–ª–∏ —à–ø–∏–ª—å–∫–∞–º–∏ (—á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 1‚Äì1.5 –º)\n\n"
        "üî∏ <b>7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        "‚ñ™ –ù–∞ —Å–∫–ª–æ–Ω–∞—Ö –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ—Ä–µ—à—ë—Ç–∫—É –ø–æ–≤–µ—Ä—Ö –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è\n"
        "‚ñ™ –î–ª—è –∑–∞—â–∏—Ç—ã —Å–∫–ª–æ–Ω–∞ –æ—Ç —ç—Ä–æ–∑–∏–∏ –ø–æ–¥–æ–π–¥—É—Ç –±–∏–æ–º–∞—Ç—ã\n"
        "‚ñ™ –•—Ä–∞–Ω–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å—É—Ö–æ–º –º–µ—Å—Ç–µ, –∑–∞—â–∏—â—ë–Ω–Ω–æ–º –æ—Ç —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–∞\n\n"
        "üìå <i>–ù–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–æ–π–¥–∏ –∫–≤–∏–∑ –≤ –º–µ–Ω—é, –∏ –±–æ—Ç —Å–∞–º –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω—É–∂–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å!</i>"
    )

@dp.message(F.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: Message):
    await message.answer(
        "<b>üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
        "‚ñ™ <b>–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å (–¥–æ—Ä–Ω–∏—Ç):</b> –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è\n"
        "‚ñ™ <b>–ì–µ–æ—Å–µ—Ç–∫–∞:</b> —É—Å–∏–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏–π\n"
        "‚ñ™ <b>–ë–∏–æ–º–∞—Ç—ã:</b> –∑–∞—â–∏—Ç–∞ —Å–∫–ª–æ–Ω–æ–≤ –æ—Ç —ç—Ä–æ–∑–∏–∏\n"
        "‚ñ™ <b>–°–ø–∞–Ω–±–æ–Ω–¥:</b> –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤, –Ω–µ –≥–Ω–∏—ë—Ç\n"
        "‚ñ™ <b>–ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞:</b> –æ–±—ä—ë–º–Ω–æ–µ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )

@dp.message(F.text == "üìù –ö–≤–∏–∑")
async def quiz(message: Message):
    builder = ReplyKeyboardBuilder()
    builder.button(text="üöó –ü–∞—Ä–∫–æ–≤–∫–∞")
    builder.button(text="üè† –û—Ç–º–æ—Å—Ç–∫–∞")
    builder.button(text="üíß –î—Ä–µ–Ω–∞–∂")
    builder.button(text="üë£ –î–æ—Ä–æ–∂–∫–∞")
    builder.adjust(2)
    await message.answer("–î–ª—è —á–µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(F.text.in_({"üöó –ü–∞—Ä–∫–æ–≤–∫–∞", "üè† –û—Ç–º–æ—Å—Ç–∫–∞", "üíß –î—Ä–µ–Ω–∞–∂", "üë£ –î–æ—Ä–æ–∂–∫–∞"}))
async def quiz_answer(message: Message):
    mapping = {
        "üöó –ü–∞—Ä–∫–æ–≤–∫–∞": 250,
        "üè† –û—Ç–º–æ—Å—Ç–∫–∞": 150,
        "üíß –î—Ä–µ–Ω–∞–∂": 100,
        "üë£ –î–æ—Ä–æ–∂–∫–∞": 150
    }
    recommended = mapping.get(message.text)
    await message.answer(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: <b>{recommended} –≥/–º¬≤</b>", reply_markup=main_menu())

@dp.message()
async def handle_other(message: Message, state: FSMContext):
    current = await state.get_state()
    if current in [CalcState.waiting_for_length, CalcState.waiting_for_density]:
        return
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
