from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
import os

from config import API_TOKEN, CALC_FILE
from utils import save_calculation, load_calculations, ADVICES

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_width = State()
    waiting_for_density = State()
    waiting_for_price = State()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")],
        [KeyboardButton(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")],
        [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")],
        [KeyboardButton(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")],
    ],
    resize_keyboard=True,
)

cancel_back_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True,
)

densities = {
    "100": "–õ–µ–≥–∫–∏–π (–¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞, –¥–æ—Ä–æ–∂–µ–∫) ‚Äî 100 –≥/–º¬≤",
    "150": "–°—Ä–µ–¥–Ω–∏–π (–¥–ª—è –ø–∞—Ä–∫–æ–≤–æ–∫, –æ—Ç–º–æ—Å—Ç–æ–∫) ‚Äî 150 –≥/–º¬≤",
    "200": "–¢—è–∂–µ–ª—ã–π (–¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–∞) ‚Äî 200 –≥/–º¬≤",
    "250": "–û—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–π (–¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏) ‚Äî 250 –≥/–º¬≤",
    "300": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (–¥–ª—è —Å–∞–º—ã—Ö —Ç—è–∂–µ–ª—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫) ‚Äî 300 –≥/–º¬≤"
}

# –°—Ç–∞—Ä—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# --- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ---
@dp.message(Text(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))
async def start_calc(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5):", reply_markup=cancel_back_kb)
    await state.set_state(CalcStates.waiting_for_length)

@dp.message(CalcStates.waiting_for_length)
async def process_length(message: types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
        await state.clear()
        return
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)
        await state.clear()
        return

    try:
        length = float(text.replace(",", "."))
        if length <= 0:
            raise ValueError()
        await state.update_data(length=length)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):", reply_markup=cancel_back_kb)
        await state.set_state(CalcStates.waiting_for_width)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_back_kb)

@dp.message(CalcStates.waiting_for_width)
async def process_width(message: types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5):", reply_markup=cancel_back_kb)
        await state.set_state(CalcStates.waiting_for_length)
        return
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)
        await state.clear()
        return

    try:
        width = float(text.replace(",", "."))
        if width <= 0:
            raise ValueError()
        await state.update_data(width=width)
        dens_buttons = [KeyboardButton(text=f"{k} –≥/–º¬≤") for k in densities.keys()]
        dens_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[dens_buttons, [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:", reply_markup=dens_kb)
        await state.set_state(CalcStates.waiting_for_density)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: —à–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_back_kb)

@dp.message(CalcStates.waiting_for_density)async def process_density(message: types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):", reply_markup=cancel_back_kb)
        await state.set_state(CalcStates.waiting_for_width)
        return
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)
        await state.clear()
        return

    if text.replace(" –≥/–º¬≤", "") in densities:
        density = int(text.replace(" –≥/–º¬≤", ""))
        await state.update_data(density=density)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):", reply_markup=cancel_back_kb)
        await state.set_state(CalcStates.waiting_for_price)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=cancel_back_kb)

@dp.message(CalcStates.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    text = message.text
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        density = (await state.get_data())["density"]
        dens_buttons = [KeyboardButton(text=f"{k} –≥/–º¬≤") for k in densities.keys()]
        dens_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[dens_buttons, [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:", reply_markup=dens_kb)
        await state.set_state(CalcStates.waiting_for_density)
        return
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb)
        await state.clear()
        return

    try:
        price = float(text.replace(",", "."))
        if price <= 0:
            raise ValueError()
        await state.update_data(price=price)

        data = await state.get_data()
        length = data["length"]
        width = data["width"]
        density = data["density"]

        area = length * width
        if area < 100:
            area *= 1.2  # +20% –∑–∞–ø–∞—Å

        mass = area * (density / 1000)  # –∫–≥
        cost = area * price

        result = {
            "user_id": message.from_user.id,
            "length": length,
            "width": width,
            "density": density,
            "area": round(area, 2),
            "mass": round(mass, 2),
            "price_per_m2": price,
            "total_cost": round(cost, 2)
        }
        save_calculation(CALC_FILE, result)

        msg = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:\n"
            f"–ü–ª–æ—â–∞–¥—å: {area:.2f} –º¬≤\n"
            f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
            f"–ú–∞—Å—Å–∞: {mass:.2f} –∫–≥\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.2f} ‚ÇΩ\n\n"
            f"–í–∞—à —Ä–∞—Å—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
        )
        await message.answer(msg, reply_markup=main_kb)
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=cancel_back_kb)

# --- –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã ---
@dp.message(Text(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"))
async def my_calculations(message: types.Message):
    user_id = message.from_user.id
    all_calc = load_calculations(CALC_FILE)
    user_calc = [c for c in all_calc if c["user_id"] == user_id]

    if not user_calc:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_kb)
        return

    texts = []
    for idx, c in enumerate(user_calc[-5:], 1):  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—á–µ—Ç–æ–≤
        texts.append(
            f"{idx}. –ü–ª–æ—â–∞–¥—å: {c['area']} –º¬≤, –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {c['density']} –≥/–º¬≤, –°—Ç–æ–∏–º–æ—Å—Ç—å: {c['total_cost']} ‚ÇΩ"
        )
    await message.answer("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á—ë—Ç—ã:\n" + "\n".join(texts), reply_markup=main_kb)

# --- –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ ---
@dp.message(Text(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"))
async def advices_handler(message: types.Message):
    await message.answer("\n".join(ADVICES), reply_markup=main_kb)

# --- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ---
@dp.message(Text(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
async def materials_handler(message: types.Message):
    materials = (
        "üìå –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å ‚Äî –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ—ë–≤ –≥—Ä—É–Ω—Ç–∞.\n""üìå –ì–µ–æ—Å–µ—Ç–∫–∞ ‚Äî –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–æ–≤.\n"
        "üìå –ë–∏–æ–º–∞—Ç—ã ‚Äî —ç–∫–æ–ª–æ–≥–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —ç—Ä–æ–∑–∏–∏.\n"
        "üìå –°–ø–∞–Ω–±–æ–Ω–¥ ‚Äî –ª—ë–≥–∫–∏–π —É–∫—Ä—ã–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª.\n"
        "üìå –ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞ ‚Äî –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–∞ –∏ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è."
    )
    await message.answer(materials, reply_markup=main_kb)

if __name__ == "__main__":
    import asyncio
    os.makedirs("data", exist_ok=True)
    asyncio.run(dp.start_polling(bot))
