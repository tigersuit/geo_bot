import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
import os

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc" # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CalcStates(StatesGroup):
    waiting_for_length = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å—á—ë—Ç–æ–≤
user_calculations = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))
    kb.add(KeyboardButton("üìù –ö–≤–∏–∑"), KeyboardButton("üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"))
    kb.add(KeyboardButton("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"), KeyboardButton("üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"))
    return kb

@dp.message()
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–¥–æ—Ä–Ω–∏—Ç–∞) —à–∏—Ä–∏–Ω–æ–π 2 –º–µ—Ç—Ä–∞.",
        reply_markup=main_menu()
    )

# –†–∞—Å—á—ë—Ç
@dp.message(lambda m: m.text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def start_calc(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
    await state.set_state(CalcStates.waiting_for_length)

@dp.message(CalcStates.waiting_for_length)
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        width = 2
        area = length * width
        if area < 100:
            area *= 1.2  # –∑–∞–ø–∞—Å 20%
        area = round(area, 2)

        density_prices = {
            100: 50,
            150: 55,
            200: 60,
            250: 65,
            300: 70
        }

        results = "üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:</b>\n"
        for density, price in density_prices.items():
            total = round(area * price)
            results += f"\nüîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å {density} –≥/–º¬≤: {total} ‚ÇΩ (–ø–æ {price}‚ÇΩ/–º¬≤)"

        user_calculations[message.from_user.id] = area
        await message.answer(
            f"üìê –ü–ª–æ—â–∞–¥—å —Å —É—á—ë—Ç–æ–º —à–∏—Ä–∏–Ω—ã 2 –º –∏ –∑–∞–ø–∞—Å–∞: {area} –º¬≤\n\n" + results,
            reply_markup=main_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.")

# –ö–≤–∏–∑
@dp.message(lambda m: m.text == "üìù –ö–≤–∏–∑")
async def quiz(message: types.Message):
    quiz_text = "üß† <b>–ó–∞—á–µ–º –≤–∞–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*[
        KeyboardButton("üÖø –ü–∞—Ä–∫–æ–≤–∫–∞ / –ø–æ–¥—ä–µ–∑–¥"),
        KeyboardButton("üö∂ –î–æ—Ä–æ–∂–∫–∞ / —Ç—Ä–æ–ø–∏–Ω–∫–∞"),
        KeyboardButton("üíß –î—Ä–µ–Ω–∞–∂ / –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ"),
        KeyboardButton("üè† –û—Ç–º–æ—Å—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ –¥–æ–º–∞"),
        KeyboardButton("‚Ü© –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
    ])
    await message.answer(quiz_text, reply_markup=kb)

@dp.message(lambda m: m.text in [
    "üÖø –ü–∞—Ä–∫–æ–≤–∫–∞ / –ø–æ–¥—ä–µ–∑–¥", "üö∂ –î–æ—Ä–æ–∂–∫–∞ / —Ç—Ä–æ–ø–∏–Ω–∫–∞",
    "üíß –î—Ä–µ–Ω–∞–∂ / –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ", "üè† –û—Ç–º–æ—Å—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ –¥–æ–º–∞"
])
async def quiz_result(message: types.Message):
    mapping = {
        "üÖø –ü–∞—Ä–∫–æ–≤–∫–∞ / –ø–æ–¥—ä–µ–∑–¥": 300,
        "üö∂ –î–æ—Ä–æ–∂–∫–∞ / —Ç—Ä–æ–ø–∏–Ω–∫–∞": 200,
        "üíß –î—Ä–µ–Ω–∞–∂ / –≤–æ–¥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏–µ": 150,
        "üè† –û—Ç–º–æ—Å—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ –¥–æ–º–∞": 200
    }
    density = mapping[message.text]
    await message.answer(f"üîé –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è: <b>{density} –≥/–º¬≤</b>", reply_markup=main_menu())

@dp.message(lambda m: m.text == "‚Ü© –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu())

# –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
@dp.message(lambda m: m.text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
async def tips(message: types.Message):
    text = (
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –Ω–∞—Ö–ª—ë—Å—Ç 10‚Äì15 —Å–º –º–µ–∂–¥—É –ø–æ–ª–æ—Ç–Ω–∞–º–∏.\n"
        "‚Ä¢ –£–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ —É—Ç—Ä–∞–º–±–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ.\n"
        "‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª—è–π—Ç–µ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å —Å–∫–æ–±–∞–º–∏ –∏–ª–∏ –∑–∞—Å—ã–ø–∫–æ–π.\n"
        "‚Ä¢ –î–ª—è –æ—Ç–º–æ—Å—Ç–∫–∏ ‚Äî –º–∏–Ω–∏–º—É–º 150‚Äì200 –≥/–º¬≤.\n"
        "‚Ä¢ –î–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏ ‚Äî –º–∏–Ω–∏–º—É–º 250‚Äì300 –≥/–º¬≤.\n"
    )
    await message.answer(text, reply_markup=main_menu())

# –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
@dp.message(lambda m: m.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: types.Message):
    text = (
        "üì¶ <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n"
        "‚Ä¢ –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å (–¥–æ—Ä–Ω–∏—Ç) ‚Äî –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ—ë–≤ –∏ –¥—Ä–µ–Ω–∞–∂–∞.\n"
        "‚Ä¢ –°–ø–∞–Ω–±–æ–Ω–¥ ‚Äî —É–∫—Ä—ã–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–µ—Ç–∫–∞–Ω—ã–π, –ª—ë–≥–∫–∏–π.\n"
        "‚Ä¢ –ì–µ–æ—Å–µ—Ç–∫–∞ ‚Äî –∞—Ä–º–∏—Ä—É–µ—Ç –≥—Ä—É–Ω—Ç, —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ.\n"
        "‚Ä¢ –ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞ ‚Äî –æ–±—ä—ë–º–Ω–∞—è —è—á–µ–∏—Å—Ç–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n"
        "‚Ä¢ –ë–∏–æ–º–∞—Ç—ã ‚Äî –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–æ–≤ –∏ –±–µ—Ä–µ–≥–æ–≤."
    )
    await message.answer(text, reply_markup=main_menu())

# –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã
@dp.message(lambda m: m.text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
async def my_calcs(message: types.Message):
    area = user_calculations.get(message.from_user.id)
    if area:
        await message.answer(f"üìå –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á—ë—Ç: {area} –º¬≤", reply_markup=main_menu())
    else:
        await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
