import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import os

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()
    waiting_for_confirm = State()
    waiting_for_quiz = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton("üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))
    kb.add(KeyboardButton("üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"))
    kb.add(KeyboardButton("üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"))
    kb.add(KeyboardButton("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
    kb.add(KeyboardButton("üìù –ö–≤–∏–∑"))
    kb.add(KeyboardButton("üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"))
    return kb.as_markup(resize_keyboard=True)

# –¶–µ–Ω—ã –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ (—Ä—É–±/–º2)
PRICE_BY_DENSITY = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70,
}

FIXED_WIDTH = 2  # —à–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞, –º–µ—Ç—Ä—ã

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è.\n"
        f"–®–∏—Ä–∏–Ω–∞ –≤—Å–µ—Ö —Ä—É–ª–æ–Ω–æ–≤ ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {FIXED_WIDTH} –º.\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"
@dp.message(lambda m: m.text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def start_calc(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(CalcStates.waiting_for_length)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
@dp.message(CalcStates.waiting_for_length)
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text.replace(',', '.'))
        if length <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.")
        return

    await state.update_data(length=length)
    kb = ReplyKeyboardBuilder()
    for density in PRICE_BY_DENSITY.keys():
        kb.add(KeyboardButton(str(density)))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–≥/–º¬≤):", reply_markup=kb.as_markup(resize_keyboard=True))
    await state.set_state(CalcStates.waiting_for_density)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
@dp.message(CalcStates.waiting_for_density)
async def process_density(message: types.Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in PRICE_BY_DENSITY:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")
        return

    data = await state.get_data()
    length = data['length']

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å 20%, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å < 100 –º¬≤
    area = FIXED_WIDTH * length
    if area < 100:
        area *= 1.2

    price_per_m2 = PRICE_BY_DENSITY[density]
    total_price = round(area * price_per_m2, 2)
    total_area = round(area, 2)

    result_text = (
        f"–†–∞—Å—á—ë—Ç:\n"
        f"–®–∏—Ä–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞: {FIXED_WIDTH} –º\n"
        f"–î–ª–∏–Ω–∞ —É—á–∞—Å—Ç–∫–∞: {length} –º\n"
        f"–ü–ª–æ—â–∞–¥—å (—Å –∑–∞–ø–∞—Å–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏): {total_area} –º¬≤\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
        f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} —Ä—É–±.\n"
        f"–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."
    )

    await message.answer(result_text, reply_markup=main_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–ø—Ä–∏–º–µ—Ä)
@dp.message(lambda m: m.text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
async def my_calculations(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_menu())

@dp.message(lambda m: m.text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
async def tips_and_tricks(message: types.Message):
    await message.answer("–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:\n- ...\n- ...", reply_markup=main_menu())

@dp.message(lambda m: m.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
        "- –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å (—Ä–∞–∑–Ω—ã–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏)\n"
        "- –ì–µ–æ—Å–µ—Ç–∫–∞\n"
        "- –ë–∏–æ–º–∞—Ç\n"
        "- –°–ø–∞–Ω–±–æ–Ω–¥\n"
        "- –ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞\n",
        reply_markup=main_menu()
    )

@dp.message(lambda m: m.text == "üìù –ö–≤–∏–∑")
async def quiz_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:\n"
        "1. –ü–∞—Ä–∫–æ–≤–∫–∞\n"
        "2. –û—Ç–º–æ—Å—Ç–∫–∞\n"
        "3. –î—Ä–µ–Ω–∞–∂\n"
        "4. –î–æ—Ä–æ–∂–∫–∞\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CalcStates.waiting_for_quiz)

@dp.message(CalcStates.waiting_for_quiz)
async def quiz_answer(message: types.Message, state: FSMContext):
    answers = {
        "1": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 250 –≥/–º¬≤ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏.",
        "2": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 150 –≥/–º¬≤ –¥–ª—è –æ—Ç–º–æ—Å—Ç–∫–∏.",
        "3": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 200 –≥/–º¬≤ –¥–ª—è –¥—Ä–µ–Ω–∞–∂–∞.",
        "4": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 100 –≥/–º¬≤ –¥–ª—è –¥–æ—Ä–æ–∂–∫–∏."
    }
    text = answers.get(message.text)
    if text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä.")
        return
    await message.answer(text, reply_markup=main_menu())
    await state.clear()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
