from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.filters.text import TextFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties

import logging
import os

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"), session=AiohttpSession())
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CalcStates(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()
    quiz = State()

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
DENSITIES = {
    "100": 50,
    "150": 55,
    "200": 60,
    "250": 65,
    "300": 70,
}

WIDTH_M = 2  # —à–∏—Ä–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ 2 –º–µ—Ç—Ä–∞

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"),
        KeyboardButton("üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
    )
    kb.add(
        KeyboardButton("üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"),
        KeyboardButton("üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    )
    kb.add(
        KeyboardButton("üìù –ö–≤–∏–∑"),
        KeyboardButton("üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
    )
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üõ†\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

# –ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ (—Å—Ç–∞—Ä—Ç –∏–ª–∏ –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç)
@dp.message(TextFilter(text=["üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç", "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"]))
async def start_calc(message: types.Message, state: FSMContext):
    await state.set_state(CalcStates.waiting_for_length)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (—à–∏—Ä–∏–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ 2 –º–µ—Ç—Ä–∞):",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞
@dp.message(StateFilter(CalcStates.waiting_for_length))
async def process_length(message: types.Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        if length <= 0:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(length=length)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for density in DENSITIES.keys():
        kb.add(KeyboardButton(density))

    await state.set_state(CalcStates.waiting_for_density)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–≥/–º¬≤):",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å—á–µ—Ç
@dp.message(StateFilter(CalcStates.waiting_for_density))
async def process_density(message: types.Message, state: FSMContext):
    density = message.text.strip()
    if density not in DENSITIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    data = await state.get_data()
    length = data.get("length")
    if not length:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    price_per_m2 = DENSITIES[density]

    # –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —Å –∑–∞–ø–∞—Å–æ–º +20% –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 100 –º¬≤
    area = WIDTH_M * length
    if area < 100:
        area *= 1.2  # +20% –∑–∞–ø–∞—Å

    area = round(area, 2)
    total_price = round(area * price_per_m2, 2)

    result = (
        f"–†–∞—Å—á—ë—Ç –¥–ª—è —É—á–∞—Å—Ç–∫–∞ {length} –º √ó {WIDTH_M} –º\n"
        f"–ü–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º: {area} –º¬≤\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
        f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n\n"
        f"<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_price} ‚ÇΩ"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É)
    user_data = await state.get_data()
    calc_history = user_data.get("calc_history", [])
    calc_history.append(result)
    await state.update_data(calc_history=calc_history)

    await message.answer(result, reply_markup=main_menu())
    await state.clear()

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ä–∞—Å—á—ë—Ç—ã
@dp.message(TextFilter(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã"))
async def show_calcs(message: types.Message, state: FSMContext):
    data = await state.get_data()
    calc_history = data.get("calc_history", [])
    if not calc_history:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.", reply_markup=main_menu())
        return

    text = "<b>–í–∞—à–∏ —Ä–∞—Å—á—ë—Ç—ã:</b>\n\n" + "\n\n".join(calc_history)
    await message.answer(text, reply_markup=main_menu())

# –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
@dp.message(TextFilter(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"))
async def tips_and_hacks(message: types.Message):
    text = (
        "<b>–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:</b>\n"
        "- –î–ª—è –¥—Ä–µ–Ω–∞–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç 150 –≥/–º¬≤\n"
        "- –î–ª—è –¥–æ—Ä–æ–∂–µ–∫ –∏ –ø–∞—Ä–∫–æ–≤–æ–∫ ‚Äî –æ—Ç 200 –≥/–º¬≤\n"
        "- –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ +20% –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–∞—Ö –º–µ–Ω–µ–µ 100 –º¬≤\n"
        "- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–æ–≤–Ω–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —É–∫–ª–∞–¥–∫–µ\n"
        "- –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å—Ç–æ–π—á–∏–≤ –∫ –≥–Ω–∏–µ–Ω–∏—é –∏ —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç—É\n"
        "..."
    )
    await message.answer(text, reply_markup=main_menu())

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
@dp.message(TextFilter(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
async def materials_info(message: types.Message):
    text = (
        "<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n\n"
        "<b>–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å:</b> —Ç–µ—Ä–º–æ—Å–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥—Ä–µ–Ω–∞–∂–∞.\n\n"
        "<b>–ì–µ–æ—Å–µ—Ç–∫–∞:</b> –∞—Ä–º–∏—Ä—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–∞.\n\n"
        "<b>–ë–∏–æ–º–∞—Ç—ã:</b> –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–∫–ª–æ–Ω–æ–≤ –∏ –æ–∑–µ–ª–µ–Ω–µ–Ω–∏—è.\n\n"
        "<b>–°–ø–∞–Ω–±–æ–Ω–¥:</b> –Ω–µ—Ç–∫–∞–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –≥—Ä—É–Ω—Ç–∞.\n\n"
        "<b>–û–±—ä–µ–º–Ω–∞—è –≥–µ–æ—Ä–µ—à–µ—Ç–∫–∞:</b> –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–µ–Ω–∞–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º."
    )
    await message.answer(text, reply_markup=main_menu())

# –ö–≤–∏–∑ (–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
QUIZ_QUESTIONS = [
    {
        "question": "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?",
        "options": [
            "–î–ª—è –¥—Ä–µ–Ω–∞–∂–∞",
            "–î–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≥—Ä—É–Ω—Ç–∞",
            "–î–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è",
            "–î–ª—è —É—Ç–µ–ø–ª–µ–Ω–∏—è"
        ],
        "correct": 0,  # –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        "recommend": {
            0: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 150 –≥/–º¬≤",
            1: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 200 –≥/–º¬≤",
            2: "–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π",
            3: "–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —É—Ç–µ–ø–ª–∏—Ç–µ–ª—å"
        }
    }
]

@dp.message(TextFilter(text="üìù –ö–≤–∏–∑"))
async def start_quiz(message: types.Message, state: FSMContext):
    await state.update_data(quiz_step=0)
    question = QUIZ_QUESTIONS[0]["question"]
    options = QUIZ_QUESTIONS[0]["options"]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(opt))
    await state.set_state(CalcStates.quiz)
    await message.answer(f"<b>–í–æ–ø—Ä–æ—Å:</b> {question}", reply_markup=kb)

@dp.message(StateFilter(CalcStates.quiz))
async def quiz_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    step = data.get("quiz_step", 0)
    user_answer = message.text.strip()
    question_data = QUIZ_QUESTIONS[step]

    if user_answer not in question_data["options"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    idx = question_data["options"].index(user_answer)
    recommendation = question_data["recommend"].get(idx, "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")

    await message.answer(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}", reply_markup=main_menu())
    await state.clear()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
