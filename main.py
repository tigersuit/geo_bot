import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import types

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# --- FSM States ---
class CalcState(StatesGroup):
    waiting_for_length = State()
    waiting_for_density = State()

user_data = {}

# --- –ö–Ω–æ–ø–∫–∏ ---
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"), KeyboardButton(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")],
    [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏"), KeyboardButton(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")],
    [KeyboardButton(text="üìù –ö–≤–∏–∑"), KeyboardButton(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")]
], resize_keyboard=True)

# --- –¶–µ–Ω—ã –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ ---
density_prices = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70
}

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.message()
async def handle_menu(message: Message, state: FSMContext):
    text = message.text

    if text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç" or text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")
        await state.set_state(CalcState.waiting_for_length)

    elif text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã":
        data = user_data.get(message.from_user.id, [])
        if not data:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.")
        else:
            history = "\n\n".join(data)
            await message.answer(f"<b>–í–∞—à–∏ —Ä–∞—Å—á—ë—Ç—ã:</b>\n\n{history}")

    elif text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏":
        await message.answer("‚úÖ –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:\n\n"
                             "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 150-200 –≥/–º¬≤ –¥–ª—è –¥–æ—Ä–æ–∂–µ–∫ –∏ –ø–∞—Ä–∫–æ–≤–æ–∫\n"
                             "- –£–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ —É—Ç—Ä–∞–º–±–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"
                             "- –î–µ–ª–∞–π—Ç–µ –Ω–∞—Ö–ª—ë—Å—Ç 10-20 —Å–º –º–µ–∂–¥—É –ø–æ–ª–æ—Ç–Ω–∞–º–∏")

    elif text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await message.answer("üì¶ –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
                             "‚ñ™Ô∏è –ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å ‚Äî —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                             "‚ñ™Ô∏è –ì–µ–æ—Å–µ—Ç–∫–∞ ‚Äî —É—Å–∏–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è\n"
                             "‚ñ™Ô∏è –ì–µ–æ—Ä–µ—à–µ—Ç–∫–∞ ‚Äî —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫–ª–æ–Ω–æ–≤ –∏ –¥–æ—Ä–æ–≥\n"
                             "‚ñ™Ô∏è –°–ø–∞–Ω–±–æ–Ω–¥ ‚Äî —É–∫—Ä—ã–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
                             "‚ñ™Ô∏è –ë–∏–æ–º–∞—Ç—ã ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç —ç—Ä–æ–∑–∏–∏")

    elif text == "üìù –ö–≤–∏–∑":
        await message.answer("üìù –î–ª—è —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?\n"
                             "1. –î–æ—Ä–æ–∂–∫–∞ –∏–ª–∏ –æ—Ç–º–æ—Å—Ç–∫–∞ ‚Äî 150 –≥/–º¬≤\n"
                             "2. –ü–∞—Ä–∫–æ–≤–∫–∞ ‚Äî 200 –≥/–º¬≤\n"
                             "3. –î—Ä–µ–Ω–∞–∂ ‚Äî 100 –≥/–º¬≤\n"
                             "4. –§—É–Ω–¥–∞–º–µ–Ω—Ç ‚Äî 250-300 –≥/–º¬≤")

    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω—ã ---
@dp.message(CalcState.waiting_for_length)
async def process_length(message: Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        await state.update_data(length=length)

        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(d))] for d in density_prices.keys()],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è:", reply_markup=kb)
        await state.set_state(CalcState.waiting_for_density)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å—á—ë—Ç ---
@dp.message(CalcState.waiting_for_density)
async def process_density(message: Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in density_prices:
            raise ValueError

        data = await state.get_data()
        length = data["length"]
        width = 2
        area = length * width

        if area < 100:
            area *= 1.2  # +20% –∑–∞–ø–∞—Å

        area = round(area, 2)
        price_per_m2 = density_prices[density]
        total_cost = round(area * price_per_m2, 2)

        text = (f"<b>üìê –†–∞—Å—á—ë—Ç:</b>\n"
                f"–î–ª–∏–Ω–∞: {length} –º\n"
                f"–®–∏—Ä–∏–Ω–∞: {width} –º\n"
                f"–ü–ª–æ—â–∞–¥—å —Å –∑–∞–ø–∞—Å–æ–º: {area} –º¬≤\n"
                f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
                f"–¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
                f"<b>–ò—Ç–æ–≥–æ: {total_cost} ‚ÇΩ</b>")

        await message.answer(text, reply_markup=main_kb)

        uid = message.from_user.id
        user_data.setdefault(uid, []).append(text)

        await state.clear()

    except Exception:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
