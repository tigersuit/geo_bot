import logging
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = "7999512901:AAGg3X5JRAWzDm9GqkvnVR7ur14HVsKYYrc"

logging.basicConfig(level=logging.INFO)

# FSM
class CalcState(StatesGroup):
    waiting_for_quiz = State()
    waiting_for_length = State()
    waiting_for_density = State()

DENSITY_PRICES = {
    100: 50,
    150: 55,
    200: 60,
    250: 65,
    300: 70
}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
    builder.button(text="üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
    builder.button(text="üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
    builder.button(text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
    builder.button(text="üìù –ö–≤–∏–∑")
    builder.button(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
    builder.button(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—è (–¥–æ—Ä–Ω–∏—Ç–∞) –∏ –¥—Ä—É–≥–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n"
        f"üí° –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–¥ –∑–∞–¥–∞—á—É\n"
        f"üìê –†–∞—Å—Å—á–∏—Ç–∞—é –ø–ª–æ—â–∞–¥—å –∏ —Ü–µ–Ω—É\n"
        f"üì¶ –†–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏\n"
        f"üí¨ –û—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É: https://t.me/sva_fashion",
        reply_markup=main_menu()
    )

# –ö–Ω–æ–ø–∫–∞ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
@dp.message(F.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É:\nhttps://t.me/sva_fashion")

# –ö–Ω–æ–ø–∫–∞ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç ‚Üí —Å–Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑
@dp.message(F.text == "üî¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def start_quiz(message: Message, state: FSMContext):
    await state.set_state(CalcState.waiting_for_quiz)
    builder = ReplyKeyboardBuilder()
    builder.button(text="üöó –ü–∞—Ä–∫–æ–≤–∫–∞")
    builder.button(text="üè† –û—Ç–º–æ—Å—Ç–∫–∞")
    builder.button(text="üíß –î—Ä–µ–Ω–∞–∂")
    builder.button(text="üë£ –î–æ—Ä–æ–∂–∫–∞")
    builder.adjust(2)
    await message.answer("–î–ª—è —á–µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å?", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.message(CalcState.waiting_for_quiz)
async def quiz_answer(message: Message, state: FSMContext):
    mapping = {
        "üöó –ü–∞—Ä–∫–æ–≤–∫–∞": 250,
        "üè† –û—Ç–º–æ—Å—Ç–∫–∞": 150,
        "üíß –î—Ä–µ–Ω–∞–∂": 100,
        "üë£ –î–æ—Ä–æ–∂–∫–∞": 150
    }
    recommended = mapping.get(message.text)
    if recommended:
        await message.answer(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: <b>{recommended} –≥/–º¬≤</b>")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.set_state(CalcState.waiting_for_length)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —É—á–∞—Å—Ç–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö:")

@dp.message(CalcState.waiting_for_length)
async def process_length(message: Message, state: FSMContext):
    try:
        length = float(message.text.replace(",", "."))
        await state.update_data(length=length)
        builder = ReplyKeyboardBuilder()
        for d in DENSITY_PRICES:
            builder.button(text=str(d))
        builder.adjust(3)
        await state.set_state(CalcState.waiting_for_density)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é (–≥/–º¬≤):",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 12.5")

@dp.message(CalcState.waiting_for_density)
async def process_density(message: Message, state: FSMContext):
    try:
        density = int(message.text)
        if density not in DENSITY_PRICES:
            await message.answer("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É 0 ‚ÇΩ/–º¬≤.")
            price_per_m2 = 0
        else:
            price_per_m2 = DENSITY_PRICES[density]

        data = await state.get_data()
        length = data["length"]
        width = 2
        area = length * width
        reserve_text = ""

        if area < 100:
            area *= 1.2
            reserve_text = "\nüîÑ <i>–î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø–∞—Å 20% (—É—á–∞—Å—Ç–æ–∫ &lt; 100 –º¬≤)</i>"

        total_price = round(area * price_per_m2, 2)

        await message.answer(
            f"üìè –ü–ª–æ—â–∞–¥—å: {area:.2f} –º¬≤\n"
            f"üì¶ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density} –≥/–º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_m2} ‚ÇΩ\n"
            f"üßæ –ò—Ç–æ–≥: {total_price} ‚ÇΩ{reserve_text}",
            reply_markup=main_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@dp.message(F.text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
async def new_calc(message: Message, state: FSMContext):
    await state.clear()
    await start_quiz(message, state)

@dp.message(F.text == "üíæ –ú–æ–∏ —Ä–∞—Å—á—ë—Ç—ã")
async def my_calcs(message: Message):
    await message.answer("üóÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")

@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏")
async def tips(message: Message):
    await message.answer(
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≥–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—é:</b>\n\n"
        "‚ñ™ –£–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —É—Ç—Ä–∞–º–±–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n"
        "‚ñ™ –î–µ–ª–∞–π—Ç–µ –Ω–∞—Ö–ª—ë—Å—Ç 10‚Äì20 —Å–º\n"
        "‚ñ™ –î–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç 200 –≥/–º¬≤\n"
        "‚ñ™ –ü–æ–¥ –æ—Ç–º–æ—Å—Ç–∫—É –∏–ª–∏ –¥–æ—Ä–æ–∂–∫–∏ —Ö–≤–∞—Ç–∏—Ç 150 –≥/–º¬≤\n"
        "‚ñ™ –ü—Ä–∏ –¥—Ä–µ–Ω–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö ‚Äî 100‚Äì150 –≥/–º¬≤\n"
        "‚ñ™ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–∏ —É–∫–ª–∞–¥–∫–µ ‚Äî —É–±–µ—Ä–∏—Ç–µ –æ—Å—Ç—Ä—ã–µ –∫–∞–º–Ω–∏\n"
        "‚ñ™ –°–∫—Ä–µ–ø–ª—è–π—Ç–µ –ø–æ–ª–æ—Å—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–µ–ø–ª–µ—Ä–æ–º –∏–ª–∏ –∞–Ω–∫–µ—Ä–∞–º–∏"
    )

@dp.message(F.text == "üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def materials(message: Message):
    await message.answer(
        "<b>üì¶ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>\n\n"
        "‚ñ™ <b>–ì–µ–æ—Ç–µ–∫—Å—Ç–∏–ª—å (–¥–æ—Ä–Ω–∏—Ç)</b> ‚Äî —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ—ë–≤, –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "‚ñ™ <b>–ì–µ–æ—Å–µ—Ç–∫–∞</b> ‚Äî —É—Å–∏–ª–µ–Ω–∏–µ —Å–ª–∞–±–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è\n"
        "‚ñ™ <b>–ì–µ–æ—Ä–µ—à—ë—Ç–∫–∞</b> ‚Äî –æ–±—ä—ë–º–Ω–æ–µ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–æ–Ω–æ–≤\n"
        "‚ñ™ <b>–ë–∏–æ–º–∞—Ç—ã</b> ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç —ç—Ä–æ–∑–∏–∏ –ø–æ—á–≤—ã\n"
        "‚ñ™ <b>–°–ø–∞–Ω–±–æ–Ω–¥</b> ‚Äî –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–æ–≤, –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–æ—Ä–Ω—è–∫–æ–≤"
    )

@dp.message(F.text == "üìù –ö–≤–∏–∑")
async def quiz_shortcut(message: Message, state: FSMContext):
    await start_quiz(message, state)

@dp.message()
async def unknown(message: Message, state: FSMContext):
    current = await state.get_state()
    if current in [CalcState.waiting_for_length, CalcState.waiting_for_density, CalcState.waiting_for_quiz]:
        return
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
